import unittest

from Signature_scan import *

class SignatureScanTest(unittest.TestCase):

    def test_init(self):
        signature_scan = SignatureScan()
        # Test if one instance of SignatureScan has following propeties
        self.assertEqual(len(signature_scan.hash_list_unsort), 0)
        self.assertEqual(len(signature_scan.hash_list), 0)
        self.assertEqual(len(signature_scan.tasks), 0)
        self.assertEqual(signature_scan.which_task, None)
        self.assertTrue(isinstance(signature_scan, SignatureScan))


    def test_get_file_hash(self):
        signature_scan = SignatureScan()

        # File path cannot be integer
        with self.assertRaises(ValueError):
            signature_scan.get_file_hash(1)

        # File path cannot be other type
        with self.assertRaises(TypeError):
            signature_scan.get_file_hash([])

        # Make sure this function will return value
        test_file_path = "C:\\Users\\12051\\Desktop\\run.cmd"
        self.assertNotEqual(signature_scan.get_file_hash(test_file_path), None)

        # Verify the type of return value is string
        hash_value = signature_scan.get_file_hash(test_file_path)
        self.assertTrue(isinstance(hash_value, str))


    def test_get_hash_list(self):
        signature_scan = SignatureScan()

        # Check if the return type is list
        hash_list = signature_scan.get_hashes_list()
        self.assertTrue(isinstance(hash_list, list))


    def test_get_signature_task(self):
        signature_scan = SignatureScan()

        # Check the return type
        task = signature_scan.get_signature_task()
        self.assertTrue(isinstance(task, list))


    def test_read_hash_list(self):
        signature_scan = SignatureScan()

        # Ensure return type is list
        hash_list = signature_scan.read_hash_list()
        self.assertTrue(isinstance(hash_list, list))

        # Make sure every element in list is int
        flag = True
        for hash in hash_list:
            if not isinstance(hash, int):
                flag = False
                break

        self.assertEqual(flag, True)


    def test_sort_hash_list(self):
        signature_scan = SignatureScan()

        # Test if the list is sorted in ascending order
        temp = [1,3,2,6,7,5,3,4]
        sort_temp = signature_scan.sort_hash_list(temp)
        self.assertTrue(sort_temp, [1,2,3,3,4,5,6,7])

        # Ensure return type is list
        self.assertTrue(isinstance(sort_temp, list))

    
    def test_find_match(self):
        signature_scan = SignatureScan()

        # Check if one specific number can be found
        temp = signature_scan.read_hash_list()
        sorted_temp = signature_scan.sort_hash_list(temp)
        if_match = signature_scan.find_match("44d88612fea8a8f36de82e1278abb02f")
        self.assertTrue(if_match, True)


if __name__ == '__main__':
    unittest.main()