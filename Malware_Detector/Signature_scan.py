import hashlib

# Represent relevant info of signature scan task.
class SignatureScan(object):
	def __init__(self):	
		self.hash_list_unsort = []
		self.hash_list = []
		self.tasks = []
		self.which_task = None

	# Get the signature of submitted file.
	def get_file_hash(self, file_path):
		with open (file_path, "rb") as file:
			tool = hashlib.md5()
			while True:
				content = file.read(4096)
				if not content:
					break
				tool.update(content)

			file.close()
			return tool.hexdigest()

	# Obtain the signature list of malwares.
	def get_hashes_list(self):
		return self.hash_list

	# Set files needed to check in one scan task.
	def set_signature_task(self, tasks):
		self.tasks = tasks

	# Get files needed to check.
	def get_signature_task(self):
		return self.tasks

	# Read signature list of malwares.
	def read_hash_list(self):
		with open("C:\\Users\\12051\\Desktop\\Malware_Detector\\Malware_signature.txt", "r") as file:
			int_list = []
			line = file.readline()
			while line:
				int_list.append(int(line, 16))
				line = file.readline()
				if line == "":
					break
			file.close()
		self.hash_list_unsort = int_list
		return self.hash_list_unsort

	"""
	Use quick sort to sort the signature list of malwares.
	"""
	def partition(self,sort_list,low,high):
		i = low - 1
		pivot = sort_list[high]

		for j in range(low, high):
			if sort_list[j] <= pivot:
				i += 1
				sort_list[i], sort_list[j] = sort_list[j], sort_list[i]

		sort_list[i+1], sort_list[high] = sort_list[high], sort_list[i+1]
		return i+1

	def quick_sort(self, sort_list, low, high):
		if (low < high):
			pivot = self.partition(sort_list, low, high)
			self.quick_sort(sort_list, low, pivot-1)
			self.quick_sort(sort_list, pivot+1, high)
		return sort_list

	def sort_hash_list(self, unsort_hash_list):
		sort_list = unsort_hash_list
		length = len(sort_list)
		left = 0
		right = length - 1
		self.hash_list = self.quick_sort(sort_list, left, right)
		return self.hash_list

	# Use binary search to find matching entry in signature list of malwares.
	def find_match(self,file_hash):
		left = 0
		right = len(self.hash_list) - 1
		target = int(file_hash, 16)

		while left <= right:
			mid = int((left + right) / 2)
			if target == self.hash_list[mid]:
				return True
			elif target < self.hash_list[mid]:
				right = mid - 1
			else:
				left = mid + 1
		return False