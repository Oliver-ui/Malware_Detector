import time
from tkinter import *
from turtle import right
from Signature_task import *
from Signature_scan import *
from State import *
import tkinter.ttk
import os
import sys
from tkinter.filedialog import askdirectory
from tkinter.filedialog import askopenfilename

# Configurations of each screen in this application.
class Configure_screen(object):
    def __init__(self, win):
        screen_width = win.winfo_screenwidth()
        screen_height = win.winfo_screenheight()

        ww = 900
        wh = 500

        x = (screen_width - ww) / 2
        y = (screen_height - wh) / 2

        win.geometry('%dx%d+%d+%d' %(ww,wh,x,y))
        win.title("Choose file")
        win.configure(bg="black")

# Logic and configuration of Start Screen.
class Start_screen(object):
    def go_choose_file(self):
        self.root.destroy()
        Choose_screen()

    def __init__(self):
        # Create root screen and configure it.
        self.root = Tk()
        Configure_screen(self.root)

        self.frame_empty = Frame(self.root, width=800, height=120)
        self.frame_empty.configure(bg="black")
        self.frame_empty.pack()

        # Show the application name.
        self.name = Label(self.root, text="Malware", fg="white", bg="black", font=('Arial', 120))
        self.name.pack()

        self.frame_btn = Frame(self.root)
        self.frame_btn.configure(bg="black")
        self.frame_btn.pack()

        # Create button to exit and select file.
        scan_btn = Button(self.frame_btn, width=15, height=3, text="Submit file", fg="black", bg="grey", bd=0, font=('bold', 20), command=self.go_choose_file)
        scan_btn.pack(side=LEFT, padx=15)

        exit_btn = Button(self.frame_btn, width=15, height=3, text="Exit", fg="black", bg="grey", bd=0, font=('bold', 20), command=sys.exit)
        exit_btn.pack(padx=15)

        self.root.mainloop()

"""
Allow user to select scan type and submit them in to different scan tasks.
Sample files are fixed but different when user choose different scan.
"""
class Choose_screen(object):

    # Check which scan type is selected
    def which_scan_type(self):
        global scan_type
        if self.iv_default.get() == 1:
            self.scan_type = "Signature"
            self.read_files(self.scan_type)
        else:
            self.scan_type = "Behaviour"
            self.read_files(self.scan_type)

        scan_type = self.scan_type
        print(scan_type)

    # Read different files according to selected scan type.
    def read_files(self, scan_type):
        global task_list
        file_path = ""
        file_path_expand = ""
        if scan_type == "Signature":
            file_path = "C:\\Users\\12051\\Desktop\\Malware_Detector\\SignatureTestSamples"
            file_path_expand = "C:\\Users\\12051\\Desktop\\Malware_Detector\\SignatureTestSamples\\"
        else:
            file_path = "C:\\Users\\12051\\Desktop\\Malware_Detector\\BehaviourTestSamples"
            file_path_expand = "C:\\Users\\12051\\Desktop\\Malware_Detector\\BehaviourTestSamples\\"

        # Show the sample files' path
        self.v.set(file_path)
        file_list = os.listdir(file_path)

        # Append all samples path into task list
        for file in file_list:
            complete_file_path = file_path_expand + file
            task_list.append(complete_file_path)

        print(task_list)

    def back(self):
        # Destroy choose screen and go back to start screen
        self.root.destroy()
        Start_screen()

    def go_processing_screen(self):
        # Go to next screen only if file is submitted
        if self.v.get() != "":
            self.root.destroy()
            Progcessing_screen()

    def __init__(self):
        # Create root screen and configure it
        self.root = Tk()
        Configure_screen(self.root)

        # Create frame to load label of this screen
        self.frame_empty = Frame(self.root, width=800, height=50)
        self.frame_empty.configure(bg="black")
        self.frame_empty.pack()

        # Configure the font type and size
        self.name = Label(self.root, text="Scan file", fg="white", bg="black", font=('Arial', 50))
        self.name.pack(pady=20)

        self.frame_select = Frame(self.root, pady=20)
        self.frame_select.configure(bg="black")
        self.frame_select.pack()

        # Show the file path of samples will be scanned
        self.v = StringVar()
        Label(self.frame_select, text="Selected file(folder):  ", fg="white", bg="black", font=("bold", 15)).pack(padx=5, side=LEFT)
        Label(self.frame_select, width=60, textvariable = self.v, bg="black", fg="white", font=("bold", 12)).pack(padx=10, side=LEFT)
        
        self.frame_rb = Frame(self.root, pady=5)
        self.frame_rb.configure(bg="black")
        self.frame_rb.pack()

        # Choose scan type
        self.iv_default = IntVar()
        self.iv_default.set(1)
        Label(self.frame_rb, text="Select a scan type", font=("bold", 20), background="black", fg="white").pack(side=LEFT, padx=30)
        Radiobutton(self.frame_rb, text="Signature", bg="black", fg="grey", value=1, selectcolor = "white", variable=self.iv_default, font=("bold", 25), command=self.which_scan_type).pack()
        Radiobutton(self.frame_rb, text="Behaviour", bg="black", fg="grey", value=2, selectcolor = "white", variable=self.iv_default, font=("bold", 25), command=self.which_scan_type).pack(pady=5, side=BOTTOM)

        self.frame_btn = Frame(self.root, pady=10)
        self.frame_btn.configure(bg="black")
        self.frame_btn.pack()

        # Create start and back buttons and pack them
        Button(self.frame_btn, width=30, height=17, text="Back", command=self.back, activebackground="#778899", font=("bold",15)).pack(side=LEFT)
        Button(self.frame_btn, width=30, height=17, text="Scan", command=self.go_processing_screen, activebackground="#778899", font=("bold",15)).pack(padx=5)

        self.root.mainloop()

"""
Scan all submitted files and show current progress in progress bar.
Perform different actions refers to different actions.
"""
class Progcessing_screen(object):
    # Cancel the processing task and go back to last screen
    def cancel(self):
        self.root.destroy()
        Choose_screen()

    # Configure the progress bar
    def progress_show(self):
        self.progressbar['value'] = 0
        self.progressbar['maximum'] = 100
        self.progress_loading()

    # Perform different actions refers to selected scan type
    def progress_loading(self):
        if scan_type == "Signature":
            task_done = 0

            # Generate instance of signature scan
            signature_scan = SignatureScan()

            # Read all file names and create task instance of them each
            for file_path in task_list:
                signature_task = SignatureTask()
                signature_task.set_file_path(file_path)
                signature_scan.tasks.append(signature_task)
            
            # Get the hash list of malware database
            signature_scan.hash_list_unsort = signature_scan.read_hash_list()
            signature_scan.hash_list = signature_scan.sort_hash_list(signature_scan.hash_list_unsort)

            # Scan all the submitted file and classify them
            for task in signature_scan.tasks:
                task.state = State.PROCESSING
                file_hash = signature_scan.get_file_hash(task.get_file_path())
                task.hash = file_hash
                self.file_name.set(task.get_file_path())
                if signature_scan.find_match(task.hash):
                    task.result = "Malware"
                task.state = State.DONE
                
                # Update progress bar according to current progress
                if task.state == State.DONE:
                    task_done += 1
                    self.progressbar['value'] += (1 / len(signature_scan.tasks)) * 100
                    self.current_status.set(str(task_done) + '/' + str(len(signature_scan.tasks)))

                self.root.update()
                time.sleep(0.3)
            
            # Directly go to the result screen when all files are scanned
            if task_done == len(signature_scan.tasks):
                self.root.destroy()
                Result_screen(signature_scan.tasks)
            
        else:
            pass

    def __init__(self):
        self.root = Tk()
        Configure_screen(self.root)

        self.frame_empty = Frame(self.root, width=800, height=50)
        self.frame_empty.configure(bg="black")
        self.frame_empty.pack()

        self.fram_progress = Frame(bg="black")
        self.fram_progress.pack()

        Label(self.fram_progress, text="Process: ", fg="white", bg="black", font=('Arial', 60)).pack(pady=15)
        self.progressbar = tkinter.ttk.Progressbar(self.fram_progress, length=300)
        self.progressbar.pack(pady=20)
        
        self.current_status = StringVar()
        Label(self.fram_progress, width=20, textvariable = self.current_status, bg="black", fg="white", font=("bold", 20)).pack(pady=10)
        self.current_status.set("")
        
        self.frame_name = Frame(self.root)
        self.frame_name.configure(bg="black")
        self.frame_name.pack()

        self.file_name = StringVar()
        Label(self.frame_name, width=100, textvariable = self.file_name, bg="black", fg="white", font=("bold", 12)).pack()
        self.file_name.set("")

        self.frame_btn = Frame(self.root, pady=30)
        self.frame_btn.configure(bg="black")
        self.frame_btn.pack()

        Button(self.frame_btn, width=15, height=3, text="start", command=self.progress_show, activebackground="#778899", font=("bold",15)).pack(side=LEFT)
        Button(self.frame_btn, width=15, height=3, text="cancel", command=self.cancel, activebackground="#778899", font=("bold",15)).pack(padx=10)
        
        self.root.mainloop()

class Result_screen(object):
    def back(self):
        self.root.destroy()
        Choose_screen()

    def finish(self):
        self.root.destroy()

    def detail_info_win_finish(self):
        self.detail_info_window.destroy()

    def on_mouse_wheel(self, event):
        self.canvas.yview_scroll(-1*(event.delta), "units")

    def delete_file(self, file_path):
        if os.path.exists(file_path):
            self.note.set("Delete Successfully")
            os.remove(file_path)
        else:
            self.note.set("Not Found")

    def check_detail(self, file_path, scan_type, result):
        self.detail_info_window = Tk()
        screen_width = self.detail_info_window.winfo_screenwidth()
        screen_height = self.detail_info_window.winfo_screenheight()

        ww = 850
        wh = 300

        x = (screen_width - ww) / 2
        y = (screen_height - wh) / 2

        self.detail_info_window.geometry('%dx%d+%d+%d' %(ww,wh,x,y))
        self.detail_info_window.title("Scan Information")
        self.detail_info_window.configure(bg="lavender")

        self.frame_invisible = Frame(self.detail_info_window)
        self.frame_invisible.configure(bg="lavender", height=20)
        self.frame_invisible.pack()

        Label(self.detail_info_window, text="File Path:   " +  file_path, fg="black", bg="lavender", font=("bold", 12)).pack(pady=10)
        Label(self.detail_info_window, text="Scan Type:   " +  scan_type, fg="black", bg="lavender", font=("bold", 20)).pack(pady=10)
        Label(self.detail_info_window, text="Scan Result:   " +  result, fg="black", bg="lavender", font=("bold", 20)).pack(pady=10)
        
        self.btn_frame_detail = Frame(self.detail_info_window)
        self.btn_frame_detail.configure(bg="lavender", width=200)
        self.btn_frame_detail.pack(side=BOTTOM, pady=20)

        Button(self.btn_frame_detail, width=30, height=2, text="Delete", command= lambda:self.delete_file(file_path), activebackground="#708090", font=("bold",15)).pack(padx=10, pady=5, side=LEFT)
        Button(self.btn_frame_detail, width=30, height=2, text="Close", command=self.detail_info_win_finish, activebackground="#708090", font=("bold",15)).pack(padx=5, pady=5)

    def __init__(self, tasks):
        self.root = Tk()
        Configure_screen(self.root)
        
        height = len(task_list) * 130
        self.canvas = Canvas(self.root, width=900, height=height, scrollregion=(0,0,height,height))
        self.canvas.configure(bg="black")
        self.canvas.bind_all("<MouseWheel>", self.on_mouse_wheel)
        self.canvas.pack()

        self.whole_page = Frame(self.canvas)
        self.whole_page.configure(bg="black")
        self.whole_page.pack()
        Label(self.whole_page, width = 100, text=scan_type + "  Scan  Result", bg="black", fg="white", font=("bold", 40)).pack(pady=5)


        self.tasks = tasks
        for task in self.tasks:
            self.frame_result = Frame(self.whole_page)
            self.frame_result.configure(bg="black")
            self.frame_result.pack(pady=10)
            
            if task.result == "Benign":
                Label(self.frame_result, width=8, height=4, bg="green").pack(side=LEFT,padx=20)
            
            else:
                Label(self.frame_result, width=8, height=4, bg="red").pack(side=LEFT,padx=20)

            Button(self.frame_result, width=75, text=task.get_file_path(), bg="black", fg="white", font=("bold", 13), cursor='plus', command= lambda file_path=task.get_file_path(), scan_type = scan_type, result = task.get_result(): self.check_detail(file_path, scan_type, result)).pack()
            Label(self.frame_result, width=20, text=task.get_result(), bg="black", fg="white", font=("bold", 20)).pack(side=BOTTOM)

        self.frame_btn = Frame(self.whole_page)
        self.frame_btn.configure(bg="black", width=200)
        self.frame_btn.pack(side=BOTTOM, pady=20)

        Button(self.frame_btn, width=30, height=2, text="Back", command=self.back, activebackground="#708090", font=("bold",15)).pack(padx=30, side=LEFT)
        Button(self.frame_btn, width=30, height=2, text="Finish", command=self.finish, activebackground="#708090", font=("bold",15)).pack()

        self.vbar = Scrollbar(self.canvas,orient=VERTICAL)
        self.vbar.place(x=880,width=20,height=500)
        self.vbar.configure(command=self.canvas.yview)
        self.canvas.config(yscrollcommand=self.vbar.set)
        self.canvas.create_window((420, 50*height/100), window=self.whole_page)

        self.root.mainloop()

# Record scan type
scan_type = ""

# Record task list
task_list = []

# Start the whole application
Start_screen()
